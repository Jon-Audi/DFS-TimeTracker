
type Employee @table(key: "employeeId") {
  employeeId: ID! @autogenerated
  name: String!
  role: String! # "Yard", "Sales", "Management", "Admin"
  pin: String!
  timeEntries: [TimeEntry]! @relation(on: "employeeId", to: "employeeId")
}

type TimeEntry @table(key: "timeEntryId") {
  timeEntryId: ID! @autogenerated
  employeeId: ID!
  clockIn: Timestamp!
  clockOut: Timestamp
  employee: Employee! @relation(on: "employeeId", to: "employeeId")
}

type EmployeeWithStatus {
    employee: Employee!
    status: String! # 'Clocked In' or 'Clocked Out'
    totalHours: Float!
}

query listUsers {
  employees {
    employeeId
    name
    role
    pin
  }
}

query getEmployeeDetails(employeeId: ID!) {
    employee(employeeId: $employeeId) {
        employeeId
        name
        role
        timeEntries(orderBy: { clockIn: "DESC" }, limit: 1) {
            clockIn
            clockOut
        }
    }
}

query listEmployeesWithStatus {
  employees(orderBy: { name: "ASC" }) {
    employeeId
    name
    role
    timeEntries(
        # A reasonable limit to calculate current status and weekly hours
        orderBy: { clockIn: "DESC" },
        limit: 50
    ) {
        clockIn
        clockOut
    }
  }
}

query listTimeEntriesForEmployee(employeeId: ID!, startTime: Timestamp!, endTime: Timestamp!) {
    timeEntries(
        filter: { employeeId: { eq: $employeeId }, clockIn: { gte: $startTime, lte: $endTime } },
        orderBy: { clockIn: "ASC" }
    ) {
        clockIn
        clockOut
    }
}


mutation createEmployee(name: String!, role: String!, pin: String!) {
  insertIntoEmployee(
    name: $name,
    role: $role,
    pin: $pin
  ) {
    employeeId
    name
    role
    pin
  }
}

mutation clockIn(employeeId: ID!) {
  insertIntoTimeEntry(
    employeeId: $employeeId,
    clockIn: "now()"
  ) {
    timeEntryId
    clockIn
    clockOut
  }
}

mutation clockOut(timeEntryId: ID!) {
    updateTimeEntry(
        timeEntryId: $timeEntryId,
        clockOut: "now()"
    ) {
        timeEntryId
        clockIn
        clockOut
    }
}

query getLatestTimeEntry(employeeId: ID!) {
    timeEntries(
        filter: { employeeId: { eq: $employeeId }},
        orderBy: { clockIn: "DESC" },
        limit: 1
    ) {
        timeEntryId
        clockIn
        clockOut
    }
}

